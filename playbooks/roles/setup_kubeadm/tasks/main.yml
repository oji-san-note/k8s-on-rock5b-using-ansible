- name: swapoff
  become: true
  ansible.builtin.systemd:
    name: armbian-zram-config.service
    state: stopped
    enabled: false
  notify: swapoff

- name: place containerd.conf
  become: true
  ansible.builtin.copy:
    src: containerd.conf
    dest: /etc/modules-load.d/containerd.conf
    owner: root
    group: root
    mode: 0644
  notify: load containerd

- name: copy 99-kubernetes-cri.conf
  become: true
  ansible.builtin.copy:
    src: 99-kubernetes-cri.conf
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    owner: root
    group: root
    mode: 0644
  notify: apply sysctl

- name: install iptables packages
  become: true
  ansible.builtin.apt:
    update_cache: yes
    pkg: "{{ item }}"
  loop:
    - iptables
    - arptables
    - ebtables

- name: change iptables backend to legacy
  become: true
  ansible.builtin.command: /usr/bin/update-alternatives --set iptables /usr/sbin/iptables-legacy

- name: change ip6tables backend to legacy
  become: true
  ansible.builtin.command: /usr/bin/update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy

- name: change ebtables backend to legacy
  become: true
  ansible.builtin.command: /usr/bin/update-alternatives --set ebtables /usr/sbin/ebtables-legacy

- name: change arptables backend to legacy
  become: true
  ansible.builtin.command: /usr/bin/update-alternatives --set arptables /usr/sbin/arptables-legacy

- name: add docker GPG key
  become: true
  ansible.builtin.shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc && chmod a+r /etc/apt/keyrings/docker.asc

- name: install basic packages
  become: true
  ansible.builtin.apt:
    state: present
    update_cache: yes
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg2
      - software-properties-common

- name: add docker repository
  become: true
  ansible.builtin.shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

- name: create containerd directory
  become: true
  ansible.builtin.file:
    path: /etc/containerd
    owner: root
    group: root
    state: directory
    mode: 0755

- name: place config.toml
  become: true
  ansible.builtin.copy:
    src: config.toml
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: 0644
  notify:
    - restart containerd

- name: create containerd directory
  become: true
  ansible.builtin.file:
    path: /etc/systemd/system/containerd.service.d
    owner: root
    group: root
    state: directory
    mode: 0755

- name: add GPG key for helm
  become: true
  ansible.builtin.shell: curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null

- name: add apt repository for helm
  become: true
  ansible.builtin.shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list

- name: add Google GPG key
  become: true
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg

- name: add k8s repository
  become: true
  ansible.builtin.shell: curl -fsSL "https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key" | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg --batch --yes && echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list

- name: install containerd package
  become: yes
  ansible.builtin.apt:
    update_cache: yes
    name:
      - "containerd.io={{ containerd_ver }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: install helm package
  become: yes
  ansible.builtin.apt:
    update_cache: yes
    name:
      - "helm={{ helm_ver }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: install kubeadm
  become: true
  ansible.builtin.apt:
    state: present
    update_cache: yes
    name: "{{ item }}"
  loop:
    - "kubelet={{ kube_ver }}"
    - "kubeadm={{ kube_ver }}"
    - "kubectl={{ kube_ver }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: hold kubeadm
  become: true
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
  ignore_errors: "{{ ansible_check_mode }}"

- name: place crictl
  become: true
  ansible.builtin.unarchive:
    remote_src: yes
    src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.30.0/crictl-v1.30.0-linux-arm64.tar.gz
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755

- name: mkdir /var/log/kubelet
  become: true
  ansible.builtin.file:
    path: /var/log/kubelet
    state: directory
    owner: root
    group: adm
    mode: 0755

- name: place 45-kubelet.conf for rsyslog
  become: true
  ansible.builtin.copy:
    src: 45-kubelet.conf
    dest: /etc/rsyslog.d/45-kubelet.conf
    owner: root
    group: root
    mode: 0644
  notify:
    - restart rsyslog

- name: place kubelet for logrotate
  become: true
  ansible.builtin.copy:
    src: kubelet
    dest: /etc/logrotate.d/kubelet
    owner: root
    group: root
    mode: 0644

- name: reboot
  become: true
  ansible.builtin.reboot:
    reboot_timeout: 300
